"""
Build optoConfig-96 using cxFreeze on Windows and Mac.

Additional requirements for building:
cx-freeze >= 6.13

On Mac: dmgbuild for creation of a .dmg archive

With an (activated virtual) environment configured to run optoConfig96, run
`python freeze.py build` from the folder containing the freeze.py file (parent
folder of the optoConfig96 package).
"""

import os
import sys
import shutil
import subprocess
from distutils.util import get_platform

# ------------------------------------------------------------------------------
# SETUP
# ------------------------------------------------------------------------------

if sys.platform == 'darwin':
    sys.argv.append('bdist_mac')

# Name of the Python package
pkg_name = 'optoConfig96'

# Name to use for the frozen version
appname = 'optoConfig96'

# Name of the automatically generated main script
main_script_name = appname + '.py'

exec('from %s import __version__ as version' % pkg_name)

pexe_path = os.path.split(sys.executable)[0]
if sys.platform in ('linux', 'darwin'):
    pydir = "python{pymajor}.{pyminor}".format(
        pymajor = sys.version_info.major,
        pyminor = sys.version_info.minor)
    lib_path = os.path.abspath(os.path.join(pexe_path, '..', 'lib', pydir, 'site-packages'))
elif sys.platform == 'win32':
    lib_path = os.path.abspath(os.path.join(pexe_path, '..', 'Lib', 'site-packages'))

pkg_path = os.path.abspath(os.path.join('.', pkg_name))
rsc_path = os.path.join(pkg_path, 'resources')
mac_icon_path = os.path.join(rsc_path, 'oc96.icns')
win_icon_path = os.path.join(rsc_path, 'oc96.ico')
others_icon_path = os.path.join(rsc_path, 'appicon.png')

target_path = os.path.abspath(__file__)
target_path = os.path.split(target_path)[0]
target_path = os.path.abspath(os.path.join(target_path, 'build'))
bundle_name = '{appname}-{version}'.format(appname = appname, version = version)
raw_target = os.path.join(target_path, sys.platform, bundle_name)
if sys.platform == 'darwin':
    raw_target = raw_target + '.app'


# The cxFreeze build result
foldername = 'exe.{platform}-{pymajor}.{pyminor}'.format(
    platform=get_platform(),
    pymajor=sys.version_info.major,
    pyminor=sys.version_info.minor
)
cxfreeze_folder = os.path.abspath(os.path.join('.', 'build', foldername))

# The .app folder generated by cx_freeze
app_folder = os.path.join(os.path.split(cxfreeze_folder)[0], bundle_name + '.app')

# WINDOWS SPECIFIC SETUP
# Nothing to do


# MAC SPECIFIC SETUP
PLIST = """
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key>
    <string>English</string>
    <key>CFBundleExecutable</key>
    <string>main</string>
    <key>CFBundleIconFile</key>
    <string>icon.icns</string>
    <key>CFBundleName</key>
    <string>{title}</string>
    <key>CFBundleIdentifier</key>
    <string>{identifier}</string>
        <key>NSHighResolutionCapable</key>
        <true/>
</dict>
</plist>
""".strip().format(title=appname, identifier=bundle_name)
if sys.platform == 'darwin':
    class FakeQtPaths:
        """
        otool returns incorrect file paths to Qt libraries. Fake their position
        to allow copying.
        """

        def __init__(self):
            reqs = ('QtCore', 'QtGui', 'QtPrintSupport', 'QtWidgets')
            srcs = []
            dsts = []
            for req in reqs:
                req = req + '.framework'
                srcs.append(os.path.join(lib_path, 'PyQt5', 'Qt', 'lib', req))
                dsts.append(os.path.abspath(os.path.join(lib_path, '../..', req)))
            self.srcs = srcs
            self.dsts = dsts

        def __enter__(self):
            for src, dst in zip(self.srcs, self.dsts):
                if os.path.exists(dst):
                    continue
                subprocess.call(['ln', '-s', src, dst])

        def __exit__(self, exc_type, exc_value, exc_traceback):
            for dst in self.dsts:
                subprocess.call(['rm', dst])

    # Make iconset
    subprocess.call(['iconutil', '-c', 'icns', os.path.join(rsc_path, 'oc96.iconset')])


# ------------------------------------------------------------------------------
# GENERATE THE MAIN SCRIPT
# ------------------------------------------------------------------------------
MAIN_SCRIPT = """
from {pkg_name} import __main__

if __name__ == '__main__':
    __main__.main()
""".strip().format(pkg_name=pkg_name)


class TempFile:
    """
    Context manager to create a named file with specified content and delete it
    after use.
    """

    def __init__(self, name, contents):
        self.file = os.path.join('.', name)
        self.contents = contents

    def __enter__(self):
        with open(self.file, 'w') as f:
            f.write(self.contents)

    def __exit__(self, ex_type, exc_valu, exc_traceback):
        os.remove(self.file)


# ------------------------------------------------------------------------------
# BUILD
# ------------------------------------------------------------------------------

from cx_Freeze import setup, Executable

base = None
# Hide console window under Windows
if sys.platform == 'win32':
    base = 'Win32GUI'

# Traits and friends utilize entry points to load necessary toolkits. For this
# to work, the egg-info folder needs to be included.
# apparently no longer needed with current cx_freeze
# pkgs_egg = ['pyface', 'traits', 'traitsui', 'six']
include_files = []
# for _, folders, _ in os.walk(lib_path):
#     for folder in folders:
#         if not folder.endswith('-info'):
#             continue

#         pkg = folder.split('-')[0].lower()
#         if pkg not in pkgs_egg:
#             continue

#         src = os.path.join(lib_path, folder)
#         dst = os.path.normpath(os.path.join('./lib', folder))
#         include_files.append((src, dst))

# For updated matplotlib
# include_files.append((os.path.join(lib_path, 'mpl_toolkits'), 'mpl_toolkits'))

excludes = [
    'traits.examples',
    'traitsui.examples',
    'tkinter'
]

packages = [
    'traitsui.qt4',
    'pyface.ui.qt4'
    # 'pygments'
]

if sys.platform == 'darwin':
    # packages.append('_sysconfigdata_m_darwin_darwin')

    # for some reason, mpl-data is not picked up under Mac
    mpl_data = os.path.join(lib_path, 'matplotlib', 'mpl-data')
    include_files.append((mpl_data, os.path.join('.', 'mpl-data')))

build_exe_options = {
    'packages': packages,
    'excludes': excludes,
    'include_files': include_files
}


bdist_mac_options = {
    'bundle_name': bundle_name,
    'iconfile': mac_icon_path,
    'custom_info_plist': './Info.plist'
}


setup_args = {
    'name': appname,
    'version': version,
    'executables': [Executable(
        main_script_name,
        # icon=others_icon_path,  # this option does not work, so ignore it for now
        base = base)],
    'options': {'build_exe': build_exe_options, 'bdist_mac': bdist_mac_options}
}

# Build and move to target directory
with TempFile(name = main_script_name, contents = MAIN_SCRIPT):
    if sys.platform == 'darwin':
        # with FakeQtPaths():
        with TempFile(name='Info.plist', contents = PLIST):
            setup(**setup_args)
        shutil.rmtree(cxfreeze_folder)
        shutil.move(app_folder, raw_target)
    elif sys.platform == 'win32':
        setup(**setup_args)
        shutil.move(cxfreeze_folder, raw_target)
    else:
        setup(**setup_args)
        shutil.move(cxfreeze_folder, raw_target)


# ------------------------------------------------------------------------------
# Post-build and cleanup
# ------------------------------------------------------------------------------

# cx_freeze pulls in all of Qt5. We don't need a lot of that.
if sys.platform in ("linux", "win32"):
    qt5_path = os.path.join(raw_target, "lib", "PyQt5")
elif sys.platform == "darwin":
    qt5_path = os.path.join(raw_target, "Contents", "MacOS", "lib", "PyQt5")

for unneeded in ["QtBluetooth",
                 "QtDesigner",
                 "QtHelp",
                 "QtLocation",
                 "QtMultimedia",
                 "QtMultimediaWidgets",
                 "QtNetwork",
                 "QtNfc",
                 "QtOpenGL",
                 "QtQml",
                 "QtQuick3D",
                 "QtQuick",
                 "QtQuickWidgets",
                 "QtRemoteObjects",
                 "QtSensors",
                 "QtSerialPort",
                 "QtSql",
                 "QtTest",
                 "QtTextToSpeech",
                 "QtWebChannel",
                 "QtWebSockets",
                 "QtXml"
                 ]:
    # Extensions and locations differ by platform
    if sys.platform == "darwin":
        os.remove(os.path.join(raw_target, "Contents", "MacOS", unneeded))
        shutil.rmtree(os.path.join(qt5_path, "Qt5", "lib", f"{unneeded}.framework"))
        exts = ["abi3.so", "pyi"]
    elif sys.platform == "win32":
        os.remove(os.path.join(qt5_path, "Qt5", "bin", f"Qt5{unneeded[2:]}.dll"))
        exts = ["pyd", "pyi"]
    elif sys.platform == "linux":
        os.remove(os.path.join(qt5_path, "Qt5", "lib", f"libQt5{unneeded[2:]}.so.5"))
        exts = ["abi3.so", "pyi"]
    for ext in exts:
        os.remove(os.path.join(qt5_path, f"{unneeded}.{ext}"))


shutil.rmtree(os.path.join(qt5_path, "bindings"))
shutil.rmtree(os.path.join(qt5_path, "Qt5", "translations"))
shutil.rmtree(os.path.join(qt5_path, "Qt5", "qml"))


# WINDOWS
if sys.platform == 'win32':
    # Need to include python3.dll, python3x.dll is not enough
    shutil.copy(os.path.join(pexe_path, 'python3.dll'), os.path.join(raw_target, 'python3.dll'))

# MAC
if sys.platform == 'darwin':
    # Make a .dmg from the .app, using dmgbuild
    # Inject variables into the settings file
    with open('_dmgbuild_settings.py', 'w') as fout:
        contents = []
        for var in ('raw_target', 'version', 'appname', 'mac_icon_path'):
            contents.append(f'{var} = {repr(eval(var))}')
        contents = '\n'.join(contents)
        with open('dmgbuild_settings.py', 'r') as fin:
            contents += fin.read()
        fout.write(contents)
    from _dmgbuild_settings import volume_name, file_name
    subprocess.call(['dmgbuild', '-s', '_dmgbuild_settings.py', volume_name, file_name])
    os.remove('_dmgbuild_settings.py')
